service: riskmapUsBot

custom:
  projectName: riskmapUsBot

provider:
  name: aws
  runtime: nodejs6.10
  stage: prod
  region: us-west-2
  stackTags:
    area: ${env:area}

# You can overwrite defaults by adding the following
#  stage: dev
#  region: us-east-1

# Add one function for each Lambda
functions:
  facebookWebhook: # Lambda that gets triggered when user starts a conversation with Facebook Messenger bot
    handler: handler.facebookWebhook
    environment:
      FACEBOOK_VALIDATION_TOKEN: ${env:facebookvalidationtoken}
      FACEBOOK_PAGE_ACCESS_TOKEN: ${env:facebookpageaccesstoken}
      DEFAULT_LANG: ${env:defaultlang}
      FRONTEND_CARD_PATH: ${env:frontendcardpath}
      FRONTEND_MAP_PATH: ${env:frontendmappath}
      SERVER_API_KEY: ${env:serverapikey}
      SERVER_PATH: ${env:serverpath}
      SERVER_PORT: ${env:serverport}
    events:
      - http:
          path: facebook/webhook
          method: GET # This webhook lambda is called by Facebook to verify the tokens
          integration: lambda
      - http:
          path: facebook/webhook
          method: POST # On POST, this lambda talks to the cognicity server to fetch unique cardId, constructs a response and sends the card OTL to the user
          integration: lambda
  facebookReply: # Lambda that gets triggered when a message is published to the SNS topic Facebook
    handler: handler.facebookReply
    environment:
      FACEBOOK_VALIDATION_TOKEN: ${env:facebookvalidationtoken}
      FACEBOOK_PAGE_ACCESS_TOKEN: ${env:facebookpageaccesstoken}
      DEFAULT_LANG: ${env:defaultlang}
      FRONTEND_CARD_PATH: ${env:frontendcardpath}
      FRONTEND_MAP_PATH: ${env:frontendmappath}
      SERVER_API_KEY: ${env:serverapikey}
      SERVER_PATH: ${env:serverpath}
      SERVER_PORT: ${env:serverport}
    events:
      - sns: Facebook
  telegramWebhook: # Lambda that gets triggered when user starts a conversation with Telegram bot
    handler: handler.telegramWebhook
    environment:
      TELEGRAM_BOTTOKEN: ${env:telegrambottoken}
      DEFAULT_LANG: ${env:defaultlang}
      FRONTEND_CARD_PATH: ${env:frontendcardpath}
      FRONTEND_MAP_PATH: ${env:frontendmappath}
      SERVER_API_KEY: ${env:serverapikey}
      SERVER_PATH: ${env:serverpath}
      SERVER_PORT: ${env:serverport}
    events:
      - http:
          path: telegram/webhook
          method: POST # On POST, this lambda talks to the cognicity server to fetch unique cardId, constructs a response and sends the card OTL to the user
          integration: lambda
  telegramReply: # Lambda that gets triggered when a message is published to the SNS topic Telegram
    handler: handler.telegramReply
    environment:
      TELEGRAM_BOTTOKEN: ${env:telegrambottoken}
      DEFAULT_LANG: ${env:defaultlang}
      FRONTEND_CARD_PATH: ${env:frontendcardpath}
      FRONTEND_MAP_PATH: ${env:frontendmappath}
      SERVER_API_KEY: ${env:serverapikey}
      SERVER_PATH: ${env:serverpath}
      SERVER_PORT: ${env:serverport}
    events:
      - sns: Telegram
